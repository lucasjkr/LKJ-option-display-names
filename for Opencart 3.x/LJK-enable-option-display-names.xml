<?xml version="1.0" encoding="UTF-8"?>
<modification>
    <id>Enable Option Display Names</id>
    <version>2.0</version>
    <vqmver>2.6</vqmver>
    <author>Lucas Krupinski - lucasjkr@me.com</author>
    <comment>This adds a second name field for options in the administrative section called "Display Name". If Display
        Name is empty, OC will display the option name, but if Display name has an entry it will display that in place
        of 'name' on the front end. This is useful if there are multiple options that should be presented as being the
        same option in the front end but need to be treated differently on the backend. For instance, two manufacturers
        have their own palettes of colors available, you can create two color options called:

        Manufacturer 1 - Color
        Manufacturer 2 - Color

        Which both display as "Color" to the visitor.

        Makes it easier to enter assign options to products in the backend is all.

        NOTE for Opencart 3.0 - Opencart is actively requesting that extensions no longer modify existing database tables,
        but to create new tables and access their contents through joins instead. This makes a ton of sense. However, in
        the spirit of quickness, I am releasing this so that people who used this with OC 2.x can get this functionality
        back in 3.0.

        A future version will switch to the official recommendation, and I can't promise that it will seemlessly migrate
        old data forward.
    </comment>

    <file name="admin/language/en-gb/catalog/option.php">
        <operation info="Add entries to the language page of the EN_GB">
            <search position="after"><![CDATA[$_['entry_sort_order']]]></search>
            <add><![CDATA[
$_['entry_display_name']   = 'Display Name (optional)';
$_['error_display']        = 'An error occured with the optional display name';

            ]]></add>
        </operation>
    </file>
    
    <file name="admin/model/catalog/option.php">
        <operation info="Create new display column in the option description table">
            <search position="after"><![CDATA[class ModelCatalogOption extends Model {
            ]]></search>
            <add><![CDATA[
    public function __construct($registry) {
        parent::__construct($registry);

        if($this->db->query("SHOW COLUMNS FROM `". DB_PREFIX . "option_description` LIKE 'display'")->num_rows ==0) {
            $this->db->query("ALTER TABLE `" . DB_PREFIX . "option_description` ADD `display` varchar(255) NOT NULL DEFAULT '' COMMENT 'added by LJK-option-display-names.xml vqmod' AFTER `name` ");
        }
    }
            ]]></add>
        </operation>

        <operation info="">
            <search position="replace"><![CDATA[
            $this->db->query("INSERT INTO " . DB_PREFIX . "option_description SET option_id = '" . (int)$option_id . "', language_id = '" . (int)$language_id . "', name = '" . $this->db->escape($value['name']) . "'");
            ]]></search>
            <add><![CDATA[
            $this->db->query("INSERT INTO " . DB_PREFIX . "option_description SET option_id = '" . (int)$option_id . "', language_id = '" . (int)$language_id . "', name = '" . $this->db->escape($value['name']) . "', display = '" . $this->db->escape($value['display']) . "'");
            ]]></add>
        </operation>

        <operation info="">
            <search position="replace"><![CDATA[
			$option_data[$result['language_id']] = array('name' => $result['name']);
            ]]></search>
            <add><![CDATA[
			$option_data[$result['language_id']] = array('name' => $result['name'], 'display' =>$result['display']);
            ]]></add>
        </operation>
    </file>


    <file name="admin/view/template/catalog/option_form.twig">
        <operation info="Add display name to option form on admin interface">
            <search position="before"><![CDATA[
            <label class="col-sm-2 control-label" for="input-type">{{ entry_type }}</label>
            ]]></search>
            <add><![CDATA[
            <!-- Begin LJK Option Display Names -->
            <label class="col-sm-2 control-label">{{ entry_display_name }}</label>
            <div class="col-sm-10">
              {% for language in languages %}
                <div class="input-group"><span class="input-group-addon"><img src="language/{{ language.code }}/{{ language.code }}.png" title="{{ language.name }}" /></span>
                  <input type="text" name="option_description[{{ language.language_id }}][display]" value="{{ option_description[language.language_id] ? option_description[language.language_id].display }}" placeholder="{{ entry_display_name }}" class="form-control" />
              </div>
                {% if error_name[language.language_id] %}
                <div class="text-danger">{{ error_display[language.language_id] }}</div>
                {% endif %}
              {% endfor %}
            </div>
          </div>
          <!-- End LJK Option Display Names -->

          <div class="form-group">
            ]]></add>
        </operation>
    </file>


    <file name="catalog/model/catalog/product.php">
        <operation info="Create new display column in the option description table - we do this here too, to make sure a customer doesn't receive an error that the column hasn't been created yet">
            <search position="after"><![CDATA[class ModelCatalogProduct extends Model {
                ]]></search>
            <add><![CDATA[
        public function __construct($registry) {
            parent::__construct($registry);

            if($this->db->query("SHOW COLUMNS FROM `". DB_PREFIX . "option_description` LIKE 'display'")->num_rows ==0) {
                $this->db->query("ALTER TABLE `" . DB_PREFIX . "option_description` ADD `display` varchar(255) NOT NULL DEFAULT '' COMMENT 'added by LJK-option-display-names.xml vqmod' AFTER `name` ");
            }
        }
                ]]></add>
        </operation>
        <operation info="Use display name (if available) on output page, otherwise use option name">
            <search position="after"><![CDATA[
            foreach ($product_option_query->rows as $product_option) {
            ]]></search>
            <add><![CDATA[
            if($product_option['display'] != "") {
                $product_option['name'] = $product_option['display'];
            }
            ]]></add>
        </operation>
    </file>

</modification>
